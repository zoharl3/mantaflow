
- Code
    - grid color: in painter.cpp, GridPainter<int>::paint()
glColor3f( 0, 0.3, 1 ); // light blue
    - particle color: in particlepainter.cpp, ParticlePainter::paintBasicSys()
if(!bp->isActive(i) ) {
    glColor3f(1.0, 0., 0.); // deleted, red
    - The drawing is done in GridPainter<int|Real|Vec3>::paint()
    - color and vector modes
        - enum RealDisplayModes { RealDispOff=0, RealDispStd, RealDispLevelset, RealDispShadeVol, RealDispShadeSurf, NumRealDispModes }; 
            - GridPainter<T>::setDispMode(int dm)
            - Gui::nextRealGrid()
        - enum VecDisplayModes  { VecDispOff=0, VecDispCentered, VecDispStaggered, VecDispUv, NumVecDispModes };
        - A vector of painters is created in MainWnd::MainWnd().
            - The paintEvent signal is connected to them.
        - I added the event EventSetRealGridDisplay and method Gui::setRealGridDisplay()
    - keys
    - mainwindow.cpp
        - if ( e->key() == Qt::Key_Escape ) {
    - glwidget.cpp
        - if ( key == Qt::Key_C && ctrl )
    - A grid is created in FluidSolver::getGridPointer(). 
    - A MAC seems to be allocated as a regular size grid. The data is kept in the centers, and the walls are interpolated, instead of the other way around.
    - knMapLinearVec3ToMACGrid() has a kernel macro in the definition. This macro has a variadic param, and it's executed for every point.
    - setInterpolMAC() interpolates MAC from particles. The four grid points are ref[0], ref[X], ref[Y], ref[X+Y]. 
    - The output precision is set in Vector3D<S>::toString() in vectorbase.h.
        - "[%+4.2f,%+4.2f]"

- Needs env var
set PYTHONHOME=c:\Python37\

- run
bin\manta c:\prj\fluid\_others3\mantaflow-master\scenes\flip01_simple.py
    - see batch files in scenes/
    
- How to Create a Mantaflow Fluid Simulation in Blender (2.82) - YouTube
https://www.youtube.com/watch?v=YdUWqkqcxzw&ab_channel=BlenderMadeEasy

- cmake
    - there's an option DEBUG_PYTHON_WITH_RELEASE for the linked lib
    - I currently set DEBUG=1, which e.g. affects TBB. I don't think the cmake was written for multi-version, and it needs to be changed for release.
    
- To replay generated scenes:
flip03_gen.py

- maya plugins
    - I created a cmake
    - densityloader expects grid density not particles (see the 4-byte header).
    
- maya
    - Use bifrost graph editor to create an object from openvdb.
    - Sample data in 
c:\prj-external-libs\mantaflow\out\
    - Sample maya scenes: manta*.ma, tornado.ma
    - Change the file path of the read_openVDB node in bifrost editor
    
- ui
    - clicking a grid cell gives info
    - +/- move slice plane
    
    
    
    