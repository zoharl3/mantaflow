
- fixed_volume
    - Set b_solve_twice to switch between push_particles() and band_interface_constr2().

- base code
    - there's exit(0) that doesn't let the script finish
    - Hang bug: the app hangs after sol.step(). Attaching the debugger and going to the qt thread using the threads window reveals updateQtGui(), gMainThread->sendAndWait().
    - LockedObjPainter::nextObject()
        - I patched it to view only named objects
    - python
        - expose a class member var
PYTHON(name=timestep)  Real mDt;  
        - explicit typedef is needed for python
PYTHON() alias Grid<Real> RealGrid
        - I wanted to return vector<double>, but it was tricky, so I returned vector<float> which was already supported.
    - mesh transparency level is set in isoAlpha in meshpainter.cpp
    - print_cam(): print camera
    - I excluded build/pp from resharper
    - The python script is run from c++ using 
PyRun_SimpleString(buf);
    - There are painters for different types
        - grid color: in painter.cpp, GridPainter<int>::paint()
glColor3f( 0, 0.3, 1 ); // light blue
        - GridPainter<Real>::paint()
        - GridPainter<Vec3>::paint()
        - MeshPainter::paint()
    - particle color: in particlepainter.cpp, ParticlePainter::paintBasicSys()
if(!bp->isActive(i) ) {
    glColor3f(1.0, 0., 0.); // deleted, red
        - There's point size in that code area after
if(!drewPoints)
    - The drawing is done in GridPainter<int|Real|Vec3>::paint()
    - color and vector modes
        - enum RealDisplayModes { RealDispOff=0, RealDispStd, RealDispLevelset, RealDispShadeVol, RealDispShadeSurf, NumRealDispModes }; 
            - GridPainter<T>::setDispMode(int dm)
            - Gui::nextRealGrid()
        - enum VecDisplayModes  { VecDispOff=0, VecDispCentered, VecDispStaggered, VecDispUv, NumVecDispModes };
            - GridPainter<Vec3>::paint(), paint velocity vectors
        - A vector of painters is created in MainWnd::MainWnd().
            - The paintEvent signal is connected to them.
        - I added the event EventSetRealGridDisplay and method Gui::setRealGridDisplay()
    - keys
    - mainwindow.cpp
        - if ( e->key() == Qt::Key_Escape ) {
    - glwidget.cpp
        - if ( key == Qt::Key_C && ctrl )
    - A grid is created in FluidSolver::getGridPointer(). 
    - A MAC is defined as usual.
        - The i index in a kernel refers to x-axis or columns. j refers to y-axis (pointing up) or rows, which start from the bottom (flipped).
        - interpolMAC() in the center of a cell is equal to getCentered(). A 2x2 grid defines one cell. Cell (i,j) interpolates with the walls shared with the next cells (i+1, j) and (i, j+1).
        - See test_MAC() in zflip.py
    - knMapLinearVec3ToMACGrid() has a kernel macro in the definition. This macro has a variadic param, and it's executed for every point.
    - setInterpolMAC() interpolates MAC from particles. The four grid points are ref[0], ref[X], ref[Y], ref[X+Y]. 
    - The output precision (also 2D/3D) is set in Vector3D<S>::toString() in vectorbase.h.
        - snprintf, "[%+4.2f,%+4.2f]", "[%d,%d]"
        - Vector3D<int>::toString() in vectorbase.cpp

- Incorrect FLIP · Issue #7 · thunil/mantaflow · GitHub
https://github.com/thunil/mantaflow/issues/7
    - see update_particles() in fluid2d_sph.m
    - the source code in build/pp is generated for the python extension

- Needs env var
set PYTHONHOME=c:\Python37\

- run
bin\manta c:\prj\fluid\_others3\mantaflow-master\scenes\flip01_simple.py
    - see batch files in scenes/
    
- How to Create a Mantaflow Fluid Simulation in Blender (2.82) - YouTube
https://www.youtube.com/watch?v=YdUWqkqcxzw&ab_channel=BlenderMadeEasy

- cmake
    - there's an option DEBUG_PYTHON_WITH_RELEASE for the linked lib
    - I currently set DEBUG=1, which e.g. affects TBB. I don't think the cmake was written for multi-version, and it needs to be changed for release.
    
- To replay generated scenes:
flip03_gen.py

- maya plugins
    - I created a cmake
    - densityloader expects grid density not particles (see the 4-byte header).
    
- maya
    - Use bifrost graph editor to create an object from openvdb.
    - Sample data in 
c:\prj-external-libs\mantaflow\out\
    - Sample maya scenes: manta*.ma, tornado.ma
    - Change the file path of the read_openVDB node in bifrost editor
    
- ui
    - clicking a grid cell gives info
    - +/- move slice plane
    
    
    
    